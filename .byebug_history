exit
Vehicle.third
Vehicle.second
Vehicle.first
Vehicle.last
Services::OrderProcess.fulfill_order 33
Order.last
exception.message
exception.errors
exception
continue
exception.data
exception
continue
exception.message
exception.message = 'not exist'
exception.message
exception
continue
exception.errors
exception
continue
order.valid?
Line_item
order
continue
Order.last.destroy
Order.count
Vehicle.last.update_attribute(:inventory_quantity, 20)
Vehicle.last.update_attribute (:inventory_quantity, 20)
Vehicle.last
order_item
Vehicle.exist? order_item
Vehicle.exist?
continue
LineItem
continue
line_item.vehicle
line_item
exit
valid_check.include? false
valid_check = feature.split('').map{|ft| FEATURE.keys.include? ft}
feature
exit
Order.last.delete
exit
Order.last.delete
LineItem.create({order: new_order, feature: order_item['features'], quantity: order_item['quantity'], vehicle_id: id})
LineItem.create({order: new_order, feature: order_item['features'], quantity: order_item['quantity'], vehicle_id: Vehicle.exist_vehicle(order_item).id})
new_order.line_items
new_order.line_items.count
new_order.line_items.save
new_order.line_items
new_order.id
new_order
new_order.line_items.create({feature: order_item['features'], quantity: order_item['quantity'], vehicle_id: Vehicle.exist_vehicle(order_item).id})
new_order.line_items.new(feature: order_item['features'], quantity: order_item['quantity'], vehicle_id: id)
LineItem.last
new_order.line_items.create(feature: order_item['features'], quantity: order_item['quantity'], vehicle_id: id)
id
id = Vehicle.exist_vehicle(order_item).id
new_order.line_items.create(feature: order_item['features'], quantity: order_item['quantity'], vehicle_id: Vehicle.exist_vehicle(order_item).id)
new_order
continue
new_order
continue
new_order
continue
new_order
exit
new.order
continue
Vehicle.exist_vehicle(order_item).id
Vehicle.exist? order_item
